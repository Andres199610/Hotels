@page "/rooms/details/{Id:int}"

@using System.Net;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (room is null)
{
    <div class="spinner" />
}
else
{
    <h3>@room.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary" href="/bookins/create/@room.Id">Nueva Reserva</a>
        <a class="btn btn-success" href="/rooms">Regresar</a>
    </div>

    <GenericList Mylist="bookings">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Estado / Departamento</th>
                        <th>Ciudades</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var booking in bookings!)
                    {
                        <tr>
                            <td>
                                @booking.Name
                            </td>
                            <td>
                                @booking.ServiceTypesNumber
                            </td>
                            <td>
                                <a class="btn btn-info" href="/states/details/@booking.Id">Detalles</a>
                                <a class="btn btn-warning" href="/states/edit/@booking.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(booking.Id))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    private Room? room;
    private List<Booking>? bookings;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<Room>($"/api/rooms/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/rooms");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        room = responseHttp.Response;
        bookings = room!.Bookings!.ToList();
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/bookings/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}