@page "/bookings"



@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal


<h3>Paises</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/bookings/create">Nueva reserva</a>
</div>


@code {
    public List<Booking>? Bookings { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.Get<List<Booking>>("api/bookings");
        Bookings = responseHppt.Response!;
    }

    private async Task Delete(Booking booking)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/bookings/{booking.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }

}