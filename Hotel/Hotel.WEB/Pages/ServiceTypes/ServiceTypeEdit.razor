@page "/servicetypes/edit/{CityId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

@using System.Net;

<h3>Editar Ciudad</h3>

@if (serviceType is null)
{
    <div class="spinner" />
}
else
{
    <ServiceTypeForm @ref="serviceTypeForm" ServiceType="serviceType" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private ServiceType? serviceType;
    private ServiceTypeForm? serviceTypeForm;

    [Parameter]
    public int ServiceTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<ServiceType>($"/api/servicetypes/{ServiceTypeId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/servicestypes");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        serviceType = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/servicetypes", serviceType);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        serviceTypeForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/boookings/details/{serviceType!.BookingId}");
    }
}